// Generated by CoffeeScript 1.3.3
(function() {
  var Requester, Statistics, async, fs, http, qs, request, url, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  async = require("async");

  fs = require("fs");

  http = require("http");

  qs = require("querystring");

  request = require("request");

  url = require("url");

  Statistics = require("./statistics");

  Requester = (function(_super) {

    __extends(Requester, _super);

    function Requester(options) {
      this.massiveRouteTable = __bind(this.massiveRouteTable, this);

      this.largePOST = __bind(this.largePOST, this);

      this.largeDownload = __bind(this.largeDownload, this);

      this.helloworld = __bind(this.helloworld, this);
      this.options = _.extend({}, this._options, this.docopt2obj(options));
      http.Agent.defaultMaxSockets = this.options.concurrents;
      http.globalAgent.maxSockets = this.options.concurrents;
      this.latency = new Array(this.options.requests);
      this.requestCounter = 0;
      this.responseCounter = 0;
    }

    Requester.prototype._options = {
      requests: 1000,
      concurrents: 50,
      ssl: false,
      debug: false
    };

    Requester.prototype._tests = ["helloworld", "largeDownload", "largePOST", "massiveRouteTable"];

    Requester.prototype.docopt2obj = function(opts) {
      var obj;
      return obj = {
        requests: +opts["-n"],
        concurrents: +opts["-c"],
        host: opts["--host"],
        admin: opts["--admin"],
        server: opts["--server"],
        test: opts["--test"],
        verbose: opts["--verbose"],
        debug: opts["--debug"]
      };
    };

    Requester.prototype.helloworld = function(i, callback) {
      var opts, self, start_time;
      self = this;
      i = self.requestCounter;
      self.requestCounter++;
      start_time = Date.now();
      opts = {
        method: "GET",
        uri: self.options.host + "/?id=" + self.options.id
      };
      return request(opts, function(err, response, body) {
        var end_time;
        end_time = Date.now();
        self.latency[i] = end_time - start_time;
        self.responseCounter++;
        return callback(err);
      });
    };

    Requester.prototype.largeDownload = function(i, callback) {
      return this.helloworld(i, callback);
    };

    Requester.prototype.largePOST = function(i, callback) {
      var contents, opts, self, start_time;
      self = this;
      i = self.requestCounter;
      self.requestCounter++;
      contents = fs.readFileSync("/usr/share/dict/words");
      start_time = Date.now();
      opts = {
        method: "POST",
        uri: self.options.host + "/?id=" + self.options.id,
        body: contents
      };
      return request(opts, function(err, response, body) {
        var end_time;
        end_time = Date.now();
        self.latency[i] = end_time - start_time;
        self.responseCounter++;
        return callback(err);
      });
    };

    Requester.prototype.massiveRouteTable = function(i, callback) {
      return this.helloworld(i, callback);
    };

    Requester.prototype.bench = function(index, concurrents, max, callback) {
      var self, _i, _results;
      self = this;
      if (!concurrents || isNaN(concurrents)) {
        return callback("invalid concurrents value");
      }
      if (!max || isNaN(max)) {
        return callback("invalid max value");
      }
      if (index > (max - concurrents)) {
        return callback(null);
      }
      if (self._tests.indexOf(self.options.test) < 0) {
        return callback("invalid test supplied " + self.options.test);
      }
      return async.forEach((function() {
        _results = [];
        for (var _i = 1; 1 <= concurrents ? _i <= concurrents : _i >= concurrents; 1 <= concurrents ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), self[self.options.test], function(err) {
        if (err) {
          return callback(err);
        }
        return self.bench(index + concurrents, concurrents, max, callback);
      });
    };

    Requester.prototype.initBench = function(callback) {
      var opts, params, self;
      self = this;
      url = [this.options.admin, "bench", "init"].join("/");
      params = {
        server: this.options.server,
        test: this.options.test
      };
      url += "?" + qs.stringify(params);
      opts = {
        method: "GET",
        uri: url
      };
      if (this.options.debug) {
        console.log(opts);
      }
      return request(opts, function(err, response, body) {
        var data;
        if (err) {
          throw err;
        }
        try {
          data = JSON.parse(body);
        } catch (e) {
          throw e;
        }
        if (self.options.debug) {
          console.log(opts.uri, "data", data);
        }
        return callback(null);
      });
    };

    Requester.prototype.startBench = function(callback) {
      var opts, params, self;
      self = this;
      url = [this.options.admin, "bench", "start"].join("/");
      params = {
        n: this.options.requests,
        c: this.options.concurrents
      };
      url += "?" + qs.stringify(params);
      opts = {
        method: "GET",
        uri: url
      };
      if (this.options.debug) {
        console.log(opts);
      }
      return request(opts, function(err, response, body) {
        var data;
        if (err) {
          throw err;
        }
        try {
          data = JSON.parse(body);
        } catch (e) {
          throw e;
        }
        if (self.options.debug) {
          console.log(opts.uri, "data", data);
        }
        return callback(null, data.id, data);
      });
    };

    Requester.prototype.finishBench = function(id, callback) {
      var opts;
      url = [this.options.admin, "bench", "finish"].join("/");
      url += "?id=" + id;
      opts = {
        method: "GET",
        uri: url
      };
      return request(opts, function(err, response, body) {
        var data;
        if (err) {
          throw err;
        }
        try {
          data = JSON.parse(body);
        } catch (e) {
          console.log(body);
          throw e;
        }
        return callback(err, data);
      });
    };

    Requester.prototype.resetBench = function(callback) {
      var opts;
      if (callback == null) {
        callback = null;
      }
      url = [this.options.admin, "bench", "reset"].join("/");
      url += "?code=walmartlabs";
      opts = {
        method: "GET",
        uri: url
      };
      return request(opts, function(err, response, body) {
        var data;
        if (err) {
          throw err;
        }
        try {
          data = JSON.parse(body);
        } catch (e) {
          console.log(body);
          throw e;
        }
        if (callback && typeof callback === 'function') {
          return callback(err, data);
        }
      });
    };

    Requester.prototype.printLatency = function() {
      var lmean, lmedian, lstddev, max, min;
      min = this.min(this.latency);
      max = this.max(this.latency);
      lmean = this.mean(this.latency);
      lmedian = this.median(this.latency);
      lstddev = this.stdDev(this.latency);
      console.log("Latencies:");
      console.log("\tmin =", min);
      console.log("\tmax =", max);
      console.log("\tmean =", lmean);
      console.log("\tmedian =", lmedian);
      return console.log("\tstd dev =", lstddev);
    };

    Requester.prototype.start = function() {
      var self;
      self = this;
      if (self.options.debug) {
        console.log("start()");
      }
      return this.initBench(function(err) {
        if (err) {
          throw err;
        }
        return self.startBench(function(err, id) {
          if (err) {
            throw err;
          }
          self.options.id = id;
          if (self.options.debug) {
            console.log("startBench returned with id = " + id);
          }
          if (self.options.debug) {
            console.log("benching", self.options.host + "/?id=" + self.options.id);
          }
          console.log("n=" + self.options.requests + ", c=" + self.options.concurrents);
          return self.bench(0, self.options.concurrents, self.options.requests, function(err) {
            var _this = this;
            if (err) {
              throw err;
            }
            return self.finishBench(id, function(err, response) {
              if (err) {
                throw err;
              }
              console.log("finished bench");
              console.log(response);
              console.log("completed " + self.requestCounter + " out of " + self.options.requests);
              return self.printLatency();
            });
          });
        });
      });
    };

    return Requester;

  })(Statistics);

  module.exports = Requester;

}).call(this);
