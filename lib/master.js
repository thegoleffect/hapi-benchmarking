// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, Hapi, Master, exec, fork, fs, path, spawn, uuid, _, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  EventEmitter = require("events").EventEmitter;

  Hapi = require("hapi");

  uuid = require("node-uuid");

  fs = require("fs");

  path = require("path");

  _ref = require("child_process"), exec = _ref.exec, spawn = _ref.spawn, fork = _ref.fork;

  Master = (function(_super) {

    __extends(Master, _super);

    function Master(port, options) {
      this.port = port != null ? port : 8080;
      if (options == null) {
        options = {};
      }
      this.pollMetrics = __bind(this.pollMetrics, this);

      this.cleanup = __bind(this.cleanup, this);

      this.onMessage = __bind(this.onMessage, this);

      this.init(options);
      this.startAdmin();
      this.start(this.options);
    }

    Master.prototype._defaultOptions = {
      host: "localhost",
      filePath: "./servers/",
      logPath: "../logs/",
      server: "hapi",
      test: "helloworld",
      metricInterval: 5000,
      debug: true,
      fileExtension: ".js"
    };

    Master.prototype.init = function(options) {
      this.options = this._opts(options);
      this.benchmark = null;
      this.benchmarkStarted = null;
      process.on("SIGINT", this.cleanup);
      return process.on("uncaughtException", this.cleanup);
    };

    Master.prototype._opts = function(options) {
      options.port = this.port;
      return this.options = _.extend({}, this._defaultOptions, options);
    };

    Master.prototype.register = function(query) {
      var id;
      id = query.id || uuid.v4();
      if (this.benchmark !== null) {
        return Hapi.Error.badRequest("Benchmark in progress, please wait until finished");
      }
      this.benchmark = {
        id: id,
        query: query
      };
      if (this.benchmarkStarted !== null) {
        this.benchmark["started"] = this.benchmarkStarted;
        this.benchmarkStarted = null;
      }
      return this.benchmark;
    };

    Master.prototype.unregister = function(id) {
      var benchmark, stats;
      if (id == null) {
        id = null;
      }
      if (id === null || (this.benchmark && this.benchmark.id && this.benchmark.id !== id)) {
        return Hapi.Error.badRequest("No such benchmark found by that id (" + id + ")");
      }
      benchmark = this.finalizeData();
      stats = this.statistics(benchmark);
      return stats;
    };

    Master.prototype.finalizeData = function() {
      var benchmark;
      benchmark = this.benchmark;
      this.benchmark = null;
      this.backupToFile(benchmark);
      return benchmark;
    };

    Master.prototype.backupFilename = function() {
      return "bench-" + this.now() + ".json";
    };

    Master.prototype.backupToFile = function(contents) {
      var backupFilename;
      if (contents === null) {
        return;
      }
      backupFilename = path.join(__dirname, this.options.logPath, this.backupFilename());
      return fs.writeFileSync(backupFilename, JSON.stringify(contents));
    };

    Master.prototype.statistics = function(data) {
      console.log(data);
      return data;
    };

    Master.prototype.aggregate = function(action, timestamp, id) {
      if (this.benchmark === null) {
        return null;
      }
      if (this.benchmark.id !== id) {
        return null;
      }
      if (!this.benchmark.hasOwnProperty(action)) {
        this.benchmark[action] = {};
      }
      if (!this.benchmark[action].hasOwnProperty(timestamp)) {
        this.benchmark[action][timestamp] = 0;
      }
      return this.benchmark[action][timestamp] += 1;
    };

    Master.prototype.record = function(action, timestamp, data) {
      if (data == null) {
        data = true;
      }
      if (this.benchmark === null) {
        return null;
      }
      if (!this.benchmark.hasOwnProperty(action)) {
        this.benchmark[action] = {};
      }
      return this.benchmark[action][timestamp] = data;
    };

    Master.prototype.now = function() {
      return Date.now() / 1000 >> 0;
    };

    Master.prototype.onMessage = function(m) {
      var ts;
      ts = this.now();
      switch (m.action) {
        case "request":
          return this.aggregate(m.action, ts, m.data);
        case "mem":
        case "load":
          return this.record(m.action, ts, m.data);
        case "started":
          return this.benchmarkStarted = ts;
        case "ended":
          return this.record(m.action, ts);
        default:
          throw "unspecified action: " + m.action;
      }
    };

    Master.prototype.cleanup = function(err) {
      if (err == null) {
        err = null;
      }
      if (err) {
        throw err;
      }
      clearInterval(this.metricsTimer);
      this.stop();
      this.stopAdmin();
      return process.nextTick(function() {
        return process.exit();
      });
    };

    Master.prototype.pollMetrics = function() {
      if (this.server && this.server.send) {
        this.server.send({
          action: "mem"
        });
        return this.server.send({
          action: "load"
        });
      }
    };

    Master.prototype.start = function(settings) {
      var serverFile;
      if (this.server !== null) {
        this.stop();
      }
      if (this.benchmark !== null) {
        return Hapi.Error.badRequest("Cannot (re)start server while benchmark is in progress");
      }
      settings = _.extend({}, this.options, settings);
      serverFile = path.join(__dirname, settings.filePath, settings.server, settings.test + settings.fileExtension);
      if (this.options.debug) {
        console.log(serverFile);
      }
      this.server = fork(serverFile);
      this.server.on('message', this.onMessage);
      this.metricsTimer = setInterval(this.pollMetrics, this.options.metricInterval);
      return {};
    };

    Master.prototype.stop = function() {
      this.record("ended", this.now());
      if (this.server) {
        this.server.removeAllListeners();
        this.server.kill();
        this.server = null;
      }
      return this.finalizeData();
    };

    Master.prototype.stopAdmin = function() {
      return this.admin.stop();
    };

    Master.prototype.startAdmin = function() {
      var finisher, initializer, reset, self, starter;
      self = this;
      this.admin = new Hapi.Server(this.options.host, this.options.port);
      initializer = {
        method: "GET",
        path: "/bench/init",
        config: {
          query: {
            server: Hapi.Types.String().required(),
            test: Hapi.Types.String()
          },
          handler: function(req) {
            var status;
            status = self.start(req.query);
            return req.reply(status);
          }
        }
      };
      reset = {
        method: "GET",
        path: "/bench/reset",
        config: {
          query: {
            code: Hapi.Types.String().required()
          },
          handler: function(req) {
            var status;
            if (req.query.code !== "walmartlabs") {
              return req.reply(Hapi.Error.badRequest("Invalid code supplied"));
            }
            status = self.start(self.options);
            return req.reply(status);
          }
        }
      };
      starter = {
        method: "GET",
        path: "/bench/start",
        config: {
          query: {
            n: Hapi.Types.Number(),
            c: Hapi.Types.Number(),
            id: Hapi.Types.String()
          },
          handler: function(req) {
            var id;
            id = self.register(req.query);
            return req.reply(id);
          }
        }
      };
      finisher = {
        method: "GET",
        path: "/bench/finish",
        config: {
          query: {
            id: Hapi.Types.String().required()
          },
          handler: function(req) {
            var stats;
            stats = self.unregister(req.query.id);
            return req.reply(stats);
          }
        }
      };
      this.admin.addRoute(initializer);
      this.admin.addRoute(reset);
      this.admin.addRoute(starter);
      this.admin.addRoute(finisher);
      return this.admin.start();
    };

    return Master;

  })(EventEmitter);

  module.exports = Master;

}).call(this);
